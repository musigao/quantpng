name: Quick Build Libraries

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (选择: windows, linux, macos, 或用逗号分隔多个)'
        required: true
        default: 'windows,linux'
        type: string

jobs:
  build:
    name: Quick Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: |
          x86_64-pc-windows-gnu
          x86_64-unknown-linux-gnu

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64 build-essential

    - name: Build Rust libraries
      run: |
        cd imagequant-sys
        
        # Build for Windows
        if echo "${{ github.event.inputs.platforms }}" | grep -q "windows"; then
          echo "🏗️ Building Rust library for Windows..."
          cargo build --release --target x86_64-pc-windows-gnu
        fi
        
        # Build for Linux
        if echo "${{ github.event.inputs.platforms }}" | grep -q "linux"; then
          echo "🏗️ Building Rust library for Linux..."
          cargo build --release --target x86_64-unknown-linux-gnu
        fi

    - name: Build JNA wrappers
      run: |
        cd jna-wrapper
        mkdir -p target
        
        # Build Windows DLL
        if echo "${{ github.event.inputs.platforms }}" | grep -q "windows"; then
          echo "🔨 Building Windows DLL..."
          x86_64-w64-mingw32-gcc -std=c11 -Wall -Wextra -O3 -fPIC \
            -DBUILDING_JNA_WRAPPER \
            -Iinclude -I../imagequant-sys \
            -c src/jna_wrapper.c -o target/jna_wrapper_windows.o
          
          x86_64-w64-mingw32-gcc -shared \
            -o target/libimagequant_jna.dll \
            target/jna_wrapper_windows.o \
            ../imagequant-sys/target/x86_64-pc-windows-gnu/release/libimagequant_sys.a \
            -static-libgcc -static
        fi
        
        # Build Linux SO
        if echo "${{ github.event.inputs.platforms }}" | grep -q "linux"; then
          echo "🔨 Building Linux SO..."
          gcc -std=c11 -Wall -Wextra -O3 -fPIC -fvisibility=hidden \
            -DBUILDING_JNA_WRAPPER \
            -Iinclude -I../imagequant-sys \
            -c src/jna_wrapper.c -o target/jna_wrapper_linux.o
          
          # Create version script
          echo "{ global: jna_*; local: *; };" > target/version.map
          
          gcc -shared -Wl,--version-script=target/version.map \
            -o target/libimagequant_jna.so \
            target/jna_wrapper_linux.o \
            ../imagequant-sys/target/x86_64-unknown-linux-gnu/release/libimagequant_sys.a
        fi

    - name: Test and verify libraries
      run: |
        cd jna-wrapper/target
        
        echo "📋 Generated files:"
        ls -la
        
        # Check file types and sizes
        for lib in *.dll *.so; do
          if [ -f "$lib" ]; then
            echo ""
            echo "📄 File info for $lib:"
            file "$lib"
            echo "📦 Size: $(du -h "$lib" | cut -f1)"
            
            # Check dependencies
            if [[ "$lib" == *.so ]]; then
              echo "🔗 Dependencies:"
              ldd "$lib" || echo "Static linking detected"
            fi
          fi
        done

    - name: Create usage package
      run: |
        mkdir -p quick-build-package/libs
        mkdir -p quick-build-package/java-example
        
        # Copy generated libraries
        if [ -f "jna-wrapper/target/libimagequant_jna.dll" ]; then
          cp jna-wrapper/target/libimagequant_jna.dll quick-build-package/libs/
        fi
        
        if [ -f "jna-wrapper/target/libimagequant_jna.so" ]; then
          cp jna-wrapper/target/libimagequant_jna.so quick-build-package/libs/
        fi
        
        # Copy existing macOS dylib if available
        if [ -f "jna-wrapper/target/libimagequant_jna.dylib" ]; then
          cp jna-wrapper/target/libimagequant_jna.dylib quick-build-package/libs/
        fi
        
        # Copy JNA library
        cp jna-wrapper/lib/jna-5.13.0.jar quick-build-package/java-example/
        
        # Create simple usage example
        cat > quick-build-package/java-example/QuickTest.java << 'EOF'
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Platform;

public interface ImageQuantLibrary extends Library {
    // 根据平台加载相应的库
    ImageQuantLibrary INSTANCE = (ImageQuantLibrary) Native.load(
        Platform.isWindows() ? "libimagequant_jna" :
        Platform.isLinux() ? "libimagequant_jna" : 
        "libimagequant_jna", ImageQuantLibrary.class);
    
    // 声明一些基本的JNA函数
    long jna_liq_attr_create();
    void jna_liq_attr_destroy(long attr);
}

public class QuickTest {
    public static void main(String[] args) {
        try {
            System.out.println("🧪 Testing ImageQuant JNA library loading...");
            
            // 尝试创建属性对象
            long attr = ImageQuantLibrary.INSTANCE.jna_liq_attr_create();
            if (attr != 0) {
                System.out.println("✅ Library loaded successfully!");
                System.out.println("📊 Created liq_attr: " + attr);
                
                // 清理
                ImageQuantLibrary.INSTANCE.jna_liq_attr_destroy(attr);
                System.out.println("🧹 Cleaned up successfully");
            } else {
                System.out.println("❌ Failed to create liq_attr");
            }
        } catch (Exception e) {
            System.out.println("❌ Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
EOF
        
        # Create usage instructions
        cat > quick-build-package/README.md << 'EOF'
# ImageQuant JNA 快速构建包

🎉 这个包包含了新构建的 ImageQuant JNA 库文件！

## 📁 文件结构

```
libs/
  ├── libimagequant_jna.dll     # Windows 64位 (如果构建了)
  ├── libimagequant_jna.so      # Linux 64位 (如果构建了)
  └── libimagequant_jna.dylib   # macOS 64位 (如果存在)

java-example/
  ├── QuickTest.java            # 简单测试示例
  └── jna-5.13.0.jar            # JNA 库
```

## 🚀 快速测试

1. **准备环境**
   ```bash
   cd quick-build-package/java-example
   ```

2. **编译测试程序**
   ```bash
   javac -cp jna-5.13.0.jar QuickTest.java
   ```

3. **运行测试** (根据你的平台选择)
   ```bash
   # Linux
   java -Djava.library.path=../libs -cp jna-5.13.0.jar:. QuickTest
   
   # Windows
   java -Djava.library.path=../libs -cp jna-5.13.0.jar;. QuickTest
   
   # macOS
   java -Djava.library.path=../libs -cp jna-5.13.0.jar:. QuickTest
   ```

## 💡 在你的项目中使用

1. 将对应平台的库文件复制到你的项目中
2. 确保 JNA 库在 classpath 中
3. 设置 `java.library.path` 指向库文件位置
4. 使用 PngCompressor 类进行图像压缩

## 🔧 已修复的问题

- ✅ 颜色通道顺序 (不再出现粉色问题)
- ✅ 跨平台库加载
- ✅ 内存管理
- ✅ 静态链接依赖

## 📝 构建信息

- 构建时间: $(date)
- Git 提交: ${GITHUB_SHA:0:8}
EOF
        
        echo ""
        echo "📦 Package contents:"
        find quick-build-package -type f | sort

    - name: Upload Windows DLL
      if: contains(github.event.inputs.platforms, 'windows')
      uses: actions/upload-artifact@v4
      with:
        name: windows-dll
        path: jna-wrapper/target/libimagequant_jna.dll
        retention-days: 7

    - name: Upload Linux SO
      if: contains(github.event.inputs.platforms, 'linux')
      uses: actions/upload-artifact@v4
      with:
        name: linux-so
        path: jna-wrapper/target/libimagequant_jna.so
        retention-days: 7

    - name: Upload complete package
      uses: actions/upload-artifact@v4
      with:
        name: imagequant-jna-quick-build
        path: quick-build-package/
        retention-days: 30

    - name: Summary
      run: |
        echo ""
        echo "🎊 快速构建完成!"
        echo ""
        echo "📋 构建的平台: ${{ github.event.inputs.platforms }}"
        echo "📁 生成的文件:"
        find jna-wrapper/target -name "*.dll" -o -name "*.so" -o -name "*.dylib" | while read file; do
          echo "  ✅ $(basename "$file") ($(du -h "$file" | cut -f1))"
        done
        echo ""
        echo "📦 下载方式:"
        echo "  1. 在 GitHub Actions 页面点击这个构建"
        echo "  2. 在 'Artifacts' 部分下载文件"
        echo "  3. 或下载完整的 'imagequant-jna-quick-build' 包"
        echo ""
        echo "🚀 开始使用库文件吧!"
