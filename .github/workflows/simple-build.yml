name: Build Dynamic Libraries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (windows,linux 或用逗号分隔)'
        required: true
        default: 'windows,linux'
        type: string

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            lib_name: libimagequant_jna.dll
            
          - platform: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            lib_name: libimagequant_jna.so

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup MSVC (Windows)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build tools (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build Rust static library
        run: |
          cd imagequant-sys
          cargo build --release --target ${{ matrix.target }}
          
          # 验证库文件是否生成
          echo "检查Rust库文件:"
          ls -la target/${{ matrix.target }}/release/
          
          # 查找静态库文件
          find target/${{ matrix.target }}/release/ -name "*.a" -o -name "*.lib" | head -5

      - name: Build JNA wrapper (Windows)
        if: matrix.platform == 'windows'
        run: |
          cd jna-wrapper
          mkdir -p target
          
          echo "开始编译Windows DLL..."
          
          # 编译C代码
          cl.exe /nologo /O2 /MD /D_USRDLL /D_WINDLL /DBUILDING_JNA_WRAPPER ^
            /I include /I ../imagequant-sys ^
            /c src/jna_wrapper.c /Fo:target/jna_wrapper.obj
          
          # 查找正确的库文件名
          echo "查找Rust静态库文件..."
          dir ..\imagequant-sys\target\${{ matrix.target }}\release\*.lib
          
          # 链接DLL - 使用正确的库文件名
          link.exe /nologo /DLL /OUT:target/${{ matrix.lib_name }} ^
            target/jna_wrapper.obj ^
            ..\imagequant-sys\target\${{ matrix.target }}\release\imagequant_sys.lib ^
            ws2_32.lib advapi32.lib userenv.lib
        shell: cmd

      - name: Build JNA wrapper (Linux)
        if: matrix.platform == 'linux'
        run: |
          cd jna-wrapper
          mkdir -p target
          
          echo "开始编译Linux SO..."
          
          # 编译C代码
          gcc -std=c11 -Wall -Wextra -O3 -fPIC -fvisibility=hidden \
            -DBUILDING_JNA_WRAPPER \
            -Iinclude -I../imagequant-sys \
            -c src/jna_wrapper.c -o target/jna_wrapper.o
          
          # 查找静态库文件
          echo "查找Rust静态库文件..."
          find ../imagequant-sys/target/${{ matrix.target }}/release/ -name "*.a" -type f
          
          # 创建版本脚本
          echo "{ global: jna_*; local: *; };" > target/version.map
          
          # 链接SO文件
          gcc -shared -Wl,--version-script=target/version.map \
            -o target/${{ matrix.lib_name }} \
            target/jna_wrapper.o \
            ../imagequant-sys/target/${{ matrix.target }}/release/libimagequant_sys.a

      - name: Verify library
        run: |
          cd jna-wrapper/target
          ls -la ${{ matrix.lib_name }}
          
          if [ "${{ matrix.platform }}" = "linux" ]; then
            file ${{ matrix.lib_name }}
            ldd ${{ matrix.lib_name }} || echo "静态链接检查"
          else
            dir ${{ matrix.lib_name }}
          fi

      - name: Upload library
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-library
          path: jna-wrapper/target/${{ matrix.lib_name }}
          retention-days: 7

  package:
    name: Create Package
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create package
        run: |
          mkdir -p release-package/libs
          
          # 复制库文件
          find artifacts -name "*.dll" -exec cp {} release-package/libs/ \;
          find artifacts -name "*.so" -exec cp {} release-package/libs/ \;
          
          # 复制说明文件
          cp jna-wrapper/lib/jna-5.13.0.jar release-package/libs/
          
          # 创建使用说明
          cat > release-package/README.md << 'EOF'
          # ImageQuant JNA 动态库

          ## 包含文件
          - libimagequant_jna.dll (Windows 64位)
          - libimagequant_jna.so (Linux 64位)  
          - jna-5.13.0.jar (JNA库)

          ## 使用方法
          1. 选择对应平台的库文件
          2. 设置 java.library.path 参数
          3. 使用JNA调用库函数

          ## 修复内容
          - 修复了指针转换警告
          - 修复了库文件路径问题
          - 简化了构建流程
          EOF
          
          echo "生成的文件:"
          find release-package -type f

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: imagequant-jna-libraries
          path: release-package/
          retention-days: 30
